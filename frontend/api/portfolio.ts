/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    [key: `/wallet/portfolio/${string}/`]: {
        get: {
            parameters: {
                path: {
                    address: string
                }
                query: {
                    forceRefresh?: boolean
                }
            }
            responses: {
                /** Search results matching criteria. */
                200: {
                    content: {
                        'application/json': components['schemas']['Portfolio']
                    }
                }
                /** Zapper is unavailable or there's a mapping error. */
                500: unknown
            }
        }
    }
    [key: `/wallet/transaction/history/${string}/`]: {
        get: {
            parameters: {
                path: {
                    address: string
                }
                query: {
                    network?: components['schemas']['Network']
                    scam?: boolean
                    timestampLessThan?: number
                }
            }
            responses: {
                /** Transaction history for the given address. */
                200: {
                    content: {
                        'application/json': components['schemas']['TransactionHistory']
                    }
                }
                /** DeBank is unavailable or there's a mapping error. */
                500: unknown
            }
        }
    }
    [key: `/wallet/transaction/activity/${string}/`]: {
        get: {
            parameters: {
                path: {
                    address: string
                }
                query: {
                    network?: components['schemas']['Network']
                    scam?: boolean
                    timestampLessThan?: number
                }
            }
            responses: {
                /** Transaction history for the given address. */
                200: {
                    content: {
                        'application/json': components['schemas']['TransactionActivity']
                    }
                }
                /** DeBank is unavailable or there's a mapping error. */
                500: unknown
            }
        }
    }
    '/wallet/rpc/': {
        post: {
            parameters: {
                query: {
                    network: components['schemas']['Network']
                }
            }
            responses: {
                /** Response from RPC Node */
                200: {
                    content: {
                        'application/json':
                            | components['schemas']['RpcNodeSuccessResponse']
                            | components['schemas']['RpcNodeErrorResponse']
                    }
                }
                /** RPC Node provider responded with an error or other internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['RpcNodeRequest']
                }
            }
        }
    }
    '/wallet/unblock/': {
        get: {
            parameters: {
                query: {
                    path: components['schemas']['UnblockPath']
                }
            }
            responses: {
                /** Response from Unblock API */
                200: {
                    content: {
                        'application/json': { [key: string]: unknown }
                    }
                }
                /** Authorization header is missing or invalid */
                401: unknown
                /** Unblock responded with an error or other internal error */
                500: unknown
            }
        }
        put: {
            parameters: {
                query: {
                    path: components['schemas']['UnblockPath']
                }
            }
            responses: {
                /** Response from Unblock API */
                200: {
                    content: {
                        'application/json': { [key: string]: unknown }
                    }
                }
                /** Authorization header is missing or invalid */
                401: unknown
                /** Unblock responded with an error or other internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': { [key: string]: unknown }
                }
            }
        }
        post: {
            parameters: {
                query: {
                    path: components['schemas']['UnblockPath']
                }
            }
            responses: {
                /** Response from Unblock API */
                200: {
                    content: {
                        'application/json': { [key: string]: unknown }
                    }
                }
                /** Authorization header is missing or invalid */
                401: unknown
                /** Unblock responded with an error or other internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': { [key: string]: unknown }
                }
            }
        }
        patch: {
            parameters: {
                query: {
                    path: components['schemas']['UnblockPath']
                }
            }
            responses: {
                /** Response from Unblock API */
                200: {
                    content: {
                        'application/json': { [key: string]: unknown }
                    }
                }
                /** Authorization header is missing or invalid */
                401: unknown
                /** Unblock responded with an error or other internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': { [key: string]: unknown }
                }
            }
        }
    }
    '/wallet/unblock/webhook/': {
        get: {
            responses: {
                /** Unblock items */
                200: {
                    content: {
                        'application/json': { [key: string]: unknown }[]
                    }
                }
                /** Authorization header is missing or invalid */
                401: unknown
                /** Unblock responded with an error or other internal error */
                500: unknown
            }
        }
    }
    [key: `/wallet/rate/default/{network}/${string}/`]: {
        get: {
            parameters: {
                path: {
                    network: components['schemas']['Network']
                    address: string
                }
            }
            responses: {
                /** Rate of a given cryptocurrency in default currency (USD) */
                200: {
                    content: {
                        'application/json': components['schemas']['FxRateResponse']
                    }
                }
                /** Rate can't be found for a given crypto currency */
                404: {
                    content: {
                        'application/json': components['schemas']['GenericErrorResponse']
                    }
                }
                /** Coingecko is not available or other internal error */
                500: unknown
            }
        }
    }
    '/wallet/transaction/simulate/': {
        post: {
            parameters: {
                query: {
                    network: components['schemas']['Network']
                }
            }
            responses: {
                /** Result of transaction simulation */
                200: {
                    content: {
                        'application/json': components['schemas']['SimulateTransactionResponse']
                    }
                }
                /** Tenderly is not available other internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['SendTransactionParameters']
                }
            }
        }
    }
    '/wallet/sign-message/simulate/': {
        post: {
            parameters: {
                query: {
                    network: components['schemas']['Network']
                }
            }
            responses: {
                /** Result of message signing simulation */
                200: {
                    content: {
                        'application/json': components['schemas']['SimulateMessageSigningResponse']
                    }
                }
            }
            requestBody: {
                content: {
                    'text/plain': string
                }
            }
        }
    }
    [key: `/wallet/transaction/${string}/result`]: {
        get: {
            parameters: {
                query: {
                    network: components['schemas']['Network']
                }
                path: {
                    hash: string
                }
            }
            responses: {
                /** Result of completed transaction */
                200: {
                    content: {
                        'application/json': components['schemas']['SubmittedTransactionResultResponse']
                    }
                }
                /** Transaction is in failed state */
                422: {
                    content: {
                        'application/json': components['schemas']['GenericErrorResponse']
                    }
                }
                /** Internal error */
                500: unknown
            }
        }
    }
    '/wallet/fee/forecast': {
        post: {
            responses: {
                /** Standard, Fast, Instant gas price estimations based on current network state */
                200: {
                    content: {
                        'application/json': components['schemas']['FeesForecastResponse']
                    }
                }
                /** Gas price estimation 3rd party provider is unavailable or another internal error */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['FeesForecastRequest']
                }
            }
        }
    }
    '/wallet/safetychecks/connection/': {
        post: {
            responses: {
                /** List of safety checks for connection with DApp */
                200: {
                    content: {
                        'application/json': components['schemas']['ConnectionSafetyChecksResponse']
                    }
                }
                /** Internal error while performing connection safetychecks */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['DAppSiteInfo']
                }
            }
        }
    }
    '/wallet/metrics': {
        post: {
            responses: {
                /** User event has been submitted */
                200: unknown
                /** Internal error while performing user event submission */
                500: unknown
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['UserEvent']
                }
            }
        }
    }
    '/wallet/currencies/bridge': {
        get: {
            responses: {
                /** Map of all possible bridges on all known networks */
                200: {
                    content: {
                        'application/json': components['schemas']['BridgeCurrenciesResponse']
                    }
                }
                /** Internal error while fetching bridge currencies */
                500: unknown
            }
        }
    }
    [key: `/wallet/approvals/${string}`]: {
        get: {
            parameters: {
                path: {
                    address: string
                }
            }
            responses: {
                /** List of all token approval for the address */
                200: {
                    content: {
                        'application/json': components['schemas']['ApprovalsResponse']
                    }
                }
                /** Internal error while fetching approvals */
                500: unknown
            }
        }
    }
}

export type components = {
    schemas: {
        /** @enum {string} */
        UnblockPath:
            | '/auth/login'
            | '/user/kyc/applicant'
            | '/user'
            | '/user/kyc/applicant/token'
            | '/user/transactions'
            | '/user/wallet/polygon'
            | '/user/bank-account/unblock'
            | '/user/bank-account/remote'
        UserEvent:
            | components['schemas']['WalletInstalledEvent']
            | components['schemas']['PortfolioLoadedEvent']
            | components['schemas']['PortfolioLoadingEvent']
            | components['schemas']['PortfolioLoadingFailedEvent']
            | components['schemas']['TransactionSubmittedEvent']
            | components['schemas']['WalletUninstalledEvent']
        WalletInstalledEvent: {
            /** @enum {undefined} */
            type: 'WalletInstalledEvent'
            installationId: string
        }
        BridgeCurrenciesResponse: {
            currencies: components['schemas']['Currencies']
            supportedCurrencies: {
                [key: string]: components['schemas']['NetworkCurrencies']
            }
        }
        NetworkCurrencies: {
            [key: string]: components['schemas']['BridgeCurrencyDetails']
        }
        BridgeCurrencyDetails: {
            from?: string[]
            to?: string[]
            canRefuel?: boolean
        }
        PortfolioLoadingEvent: {
            /** @enum {undefined} */
            type: 'PortfolioLoadingEvent'
            installationId: string
            keystoreType: components['schemas']['KeystoreType']
        }
        PortfolioLoadingFailedEvent: {
            /** @enum {undefined} */
            type: 'PortfolioLoadingFailedEvent'
            installationId: string
            keystoreType: components['schemas']['KeystoreType']
        }
        PortfolioLoadedEvent: {
            /** @enum {undefined} */
            type: 'PortfolioLoadedEvent'
            installationId: string
            keystoreType: components['schemas']['KeystoreType']
        }
        TransactionSubmittedEvent: {
            /** @enum {undefined} */
            type: 'TransactionSubmittedEvent'
            network: string
            installationId: string
            keystoreType: components['schemas']['KeystoreType']
            source:
                | components['schemas']['TransactionSubmittedEventSource']
                | null
        }
        /** @enum {string} */
        TransactionSubmittedEventSource:
            | 'zwidget'
            | 'bridge'
            | 'bridgeApprove'
            | 'swap'
            | 'swapApprove'
            | 'send'
            | 'offramp'
            | 'transactionRequestWidget'
        WalletUninstalledEvent: {
            /** @enum {undefined} */
            type: 'WalletUninstalledEvent'
            installationId: string
        }
        /** @enum {string} */
        KeystoreType:
            | 'Ledger'
            | 'Trezor'
            | 'SecretPhrase'
            | 'PrivateKey'
            | 'Contact'
            | 'Safe'
        ConnectionSafetyChecksResponse: {
            dAppInfo: components['schemas']['DAppSiteInfo']
            checks: components['schemas']['ConnectionSafetyCheck'][]
        }
        ConnectionSafetyCheck:
            | components['schemas']['SuspiciousCharactersCheckFailed']
            | components['schemas']['SuspiciousCharactersCheckPassed']
            | components['schemas']['BlacklistCheckFailed']
            | components['schemas']['BlacklistCheckPassed']
            | components['schemas']['DAppVerificationCheckFailed']
            | components['schemas']['DAppVerificationCheckPassed']
        SuspiciousCharactersCheckFailed: {
            /** @enum {undefined} */
            type: 'SuspiciousCharactersCheck'
            suspiciousPart: components['schemas']['Range']
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        SuspiciousCharactersCheckPassed: {
            /** @enum {undefined} */
            type: 'SuspiciousCharactersCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        DAppVerificationCheckFailed: {
            /** @enum {undefined} */
            type: 'DAppVerificationCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        DAppVerificationCheckPassed: {
            /** @enum {undefined} */
            type: 'DAppVerificationCheck'
            verificationUrl: string | null
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
            source: string
        }
        BlacklistCheckFailed: {
            /** @enum {undefined} */
            type: 'BlacklistCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        BlacklistCheckPassed: {
            /** @enum {undefined} */
            type: 'BlacklistCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        /** @enum {string} */
        SafetyCheckSeverity: 'Caution' | 'Danger'
        /** @enum {string} */
        SafetyCheckFailedState: 'Failed'
        /** @enum {string} */
        SafetyCheckPassedState: 'Passed'
        DAppSiteInfo: {
            hostname: string
            avatar: string | null
            title: string | null
        }
        Range: {
            start: number
            end: number
        }
        TransactionSafetyCheck:
            | components['schemas']['TransactionSimulationCheckFailed']
            | components['schemas']['TransactionSimulationCheckPassed']
            | components['schemas']['TokenVerificationCheckFailed']
            | components['schemas']['TokenVerificationCheckPassed']
            | components['schemas']['SmartContractedBlacklistCheckFailed']
            | components['schemas']['SmartContractBlacklistCheckPassed']
            | components['schemas']['NftCollectionCheckPassed']
            | components['schemas']['NftCollectionCheckFailed']
            | components['schemas']['P2pReceiverTypeCheckPassed']
            | components['schemas']['P2pReceiverTypeCheckFailed']
            | components['schemas']['ApprovalSpenderTypeCheckPassed']
            | components['schemas']['ApprovalSpenderTypeCheckFailed']
        TransactionSimulationCheckFailed: {
            /** @enum {undefined} */
            type: 'TransactionSimulationCheck'
            message: string
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        TransactionSimulationCheckPassed: {
            /** @enum {undefined} */
            type: 'TransactionSimulationCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        TokenVerificationCheckPassed: {
            /** @enum {undefined} */
            type: 'TokenVerificationCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
            currencyId: string
        }
        TokenVerificationCheckFailed: {
            /** @enum {undefined} */
            type: 'TokenVerificationCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
            currencyId: string
        }
        SmartContractBlacklistCheckPassed: {
            /** @enum {undefined} */
            type: 'SmartContractBlacklistCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        SmartContractedBlacklistCheckFailed: {
            /** @enum {undefined} */
            type: 'SmartContractBlacklistCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        NftCollectionCheckPassed: {
            /** @enum {undefined} */
            type: 'NftCollectionCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
            nftCollectionAddress: string
            source: string
        }
        P2pReceiverTypeCheckPassed: {
            /** @enum {undefined} */
            type: 'P2pReceiverTypeCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        P2pReceiverTypeCheckFailed: {
            /** @enum {undefined} */
            type: 'P2pReceiverTypeCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        ApprovalSpenderTypeCheckPassed: {
            /** @enum {undefined} */
            type: 'ApprovalSpenderTypeCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        ApprovalSpenderTypeCheckFailed: {
            /** @enum {undefined} */
            type: 'ApprovalSpenderTypeCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        ApprovalExpirationLimitCheckPassed: {
            /** @enum {undefined} */
            type: 'ApprovalExpirationLimitCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckPassedState']
        }
        ApprovalExpirationLimitCheckFailed: {
            /** @enum {undefined} */
            type: 'ApprovalExpirationLimitCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
        }
        NftCollectionCheckFailed: {
            /** @enum {undefined} */
            type: 'NftCollectionCheck'
            severity: components['schemas']['SafetyCheckSeverity']
            state: components['schemas']['SafetyCheckFailedState']
            nftCollectionAddress: string
            source: string
        }
        SendTransactionParameters: {
            /** Format: address */
            from: string
            /** Format: address */
            to?: string | null
            /** Format: transaction-data */
            data: string
            /** Format: transaction-value */
            value?: string | null
            gas?: components['schemas']['Hexadecimal'] | null
        }
        FxRateResponse: {
            rate: components['schemas']['FxRate']
            currencies: components['schemas']['Currencies']
        }
        SubmittedTransactionResultResponse: {
            transaction: components['schemas']['SimulatedTransaction']
            currencies: components['schemas']['Currencies']
        }
        SimulateMessageSigningResponse: {
            message: components['schemas']['SimulatedSignMessage']
            checks: components['schemas']['SignMessageSafetyCheck'][]
            currencies: components['schemas']['Currencies']
        }
        SimulatedSignMessage:
            | components['schemas']['PermitSignMessage']
            | components['schemas']['DaiPermitSignMessage']
            | components['schemas']['Permit2SignMessage']
            | components['schemas']['UnknownSignMessage']
        PermitSignMessage: {
            /** @enum {undefined} */
            type: 'PermitSignMessage'
            allowance: components['schemas']['PermitAllowance']
            approveTo: components['schemas']['SmartContract']
        }
        DaiPermitSignMessage: {
            /** @enum {undefined} */
            type: 'DaiPermitSignMessage'
            allowance: components['schemas']['PermitAllowance']
            approveTo: components['schemas']['SmartContract']
        }
        Permit2SignMessage: {
            /** @enum {undefined} */
            type: 'Permit2SignMessage'
            allowances: components['schemas']['PermitAllowance'][]
            approveTo: components['schemas']['SmartContract']
        }
        PermitAllowance: {
            amount: components['schemas']['ApprovalAmount']
            /** Format: bigint */
            unlimitedAmountValue: string
            expiration: components['schemas']['Expiration']
            /** Format: bigint */
            infiniteExpirationValue: string
        }
        Expiration:
            | components['schemas']['FiniteExpiration']
            | components['schemas']['InfiniteExpiration']
        FiniteExpiration: {
            /** @enum {undefined} */
            type: 'FiniteExpiration'
            /** Format: timestamp */
            timestamp: number
        }
        InfiniteExpiration: {
            /** @enum {undefined} */
            type: 'InfiniteExpiration'
        }
        UnknownSignMessage: {
            /** @enum {undefined} */
            type: 'UnknownSignMessage'
            rawMessage: string
        }
        SignMessageSafetyCheck:
            | components['schemas']['TokenVerificationCheckFailed']
            | components['schemas']['TokenVerificationCheckPassed']
            | components['schemas']['SmartContractedBlacklistCheckFailed']
            | components['schemas']['SmartContractBlacklistCheckPassed']
            | components['schemas']['ApprovalSpenderTypeCheckPassed']
            | components['schemas']['ApprovalSpenderTypeCheckFailed']
            | components['schemas']['ApprovalExpirationLimitCheckPassed']
            | components['schemas']['ApprovalExpirationLimitCheckFailed']
        SimulateTransactionResponse: {
            transaction: components['schemas']['SimulatedTransaction']
            checks: components['schemas']['TransactionSafetyCheck'][]
            currencies: components['schemas']['Currencies']
        }
        FeesForecastRequest: {
            sendTransactionParams: components['schemas']['SendTransactionParameters']
            network: components['schemas']['Network']
            gasEstimate: components['schemas']['Hexadecimal']
            gasLimit: components['schemas']['Hexadecimal']
            address: string
            selectedPreset: components['schemas']['FeesForecastSelectedPreset']
        }
        FeesForecastSelectedPreset:
            | components['schemas']['FeesForecastRequestSelectedZealPredefinedSlow']
            | components['schemas']['FeesForecastRequestSelectedZealPredefinedNormal']
            | components['schemas']['FeesForecastRequestSelectedZealPredefinedFast']
            | components['schemas']['FeesForecastRequestSelectedPresetCustom']
        FeesForecastRequestSelectedZealPredefinedSlow: {
            /** @enum {undefined} */
            type: 'Slow'
        }
        FeesForecastRequestSelectedZealPredefinedNormal: {
            /** @enum {undefined} */
            type: 'Normal'
        }
        FeesForecastRequestSelectedZealPredefinedFast: {
            /** @enum {undefined} */
            type: 'Fast'
        }
        FeesForecastRequestSelectedPresetCustom: {
            /** @enum {undefined} */
            type: 'Custom'
            fee: components['schemas']['CustomPresetRequestFee']
        }
        CustomPresetRequestFee:
            | components['schemas']['LegacyCustomPresetRequestFee']
            | components['schemas']['Eip1559CustomPresetRequestFee']
        LegacyCustomPresetRequestFee: {
            /** @enum {undefined} */
            type: 'LegacyCustomPresetRequestFee'
            gasPrice: components['schemas']['Hexadecimal']
        }
        Eip1559CustomPresetRequestFee: {
            /** @enum {undefined} */
            type: 'Eip1559CustomPresetRequestFee'
            maxPriorityFee: components['schemas']['Hexadecimal']
            maxBaseFee: components['schemas']['Hexadecimal']
        }
        FeesForecastResponse:
            | components['schemas']['FeesForecastResponseLegacyFee']
            | components['schemas']['FeesForecastResponseEip1559Fee']
        FeesForecastResponseLegacyFee: {
            /** @enum {undefined} */
            type: 'FeesForecastResponseLegacyFee'
            slow: components['schemas']['LegacyFee']
            normal: components['schemas']['LegacyFee']
            fast: components['schemas']['LegacyFee']
            custom: components['schemas']['LegacyFee'] | null
            nonce: number
            networkState: components['schemas']['LegacyNetworkState']
            balanceInNativeCurrency: components['schemas']['Money']
            currencies: components['schemas']['Currencies']
        }
        FeesForecastResponseEip1559Fee: {
            /** @enum {undefined} */
            type: 'FeesForecastResponseEip1559Fee'
            slow: components['schemas']['Eip1559Fee']
            normal: components['schemas']['Eip1559Fee']
            fast: components['schemas']['Eip1559Fee']
            custom: components['schemas']['Eip1559Fee'] | null
            nonce: number
            networkState: components['schemas']['Eip1559NetworkState']
            balanceInNativeCurrency: components['schemas']['Money']
            currencies: components['schemas']['Currencies']
        }
        NetworkState:
            | components['schemas']['Eip1559NetworkState']
            | components['schemas']['LegacyNetworkState']
        LegacyNetworkState: {
            /** @enum {undefined} */
            type: 'LegacyNetworkState'
            durationMs: number
            minGasPrice: components['schemas']['Hexadecimal']
            maxGasPrice: components['schemas']['Hexadecimal']
        }
        Eip1559NetworkState: {
            /** @enum {undefined} */
            type: 'Eip1559NetworkState'
            durationMs: number
            minPriorityFee: components['schemas']['Hexadecimal']
            maxPriorityFee: components['schemas']['Hexadecimal']
            baseFee: components['schemas']['Hexadecimal']
        }
        TransactionFees:
            | components['schemas']['Eip1559TransactionFees']
            | components['schemas']['LegacyTransactionFees']
        Eip1559TransactionFees: {
            /** @enum {undefined} */
            type: 'Eip1559TransactionFees'
            standard: components['schemas']['Eip1559Fee']
            fast: components['schemas']['Eip1559Fee']
            instant: components['schemas']['Eip1559Fee']
        }
        LegacyTransactionFees: {
            /** @enum {undefined} */
            type: 'LegacyTransactionFee'
            standard: components['schemas']['LegacyFee']
            fast: components['schemas']['LegacyFee']
            instant: components['schemas']['LegacyFee']
        }
        EstimatedFee:
            | components['schemas']['LegacyFee']
            | components['schemas']['Eip1559Fee']
        LegacyFee: {
            /** @enum {undefined} */
            type: 'LegacyFee'
            gasPrice: components['schemas']['Hexadecimal']
            priceInDefaultCurrency: components['schemas']['Money'] | null
            priceInNativeCurrency: components['schemas']['Money']
            forecastDuration: components['schemas']['ForecastDuration']
        }
        ForecastDuration:
            | components['schemas']['WithinForecast']
            | components['schemas']['OutsideOfForecast']
        OutsideOfForecast: {
            /** @enum {undefined} */
            type: 'OutsideOfForecast'
        }
        WithinForecast: {
            /** @enum {undefined} */
            type: 'WithinForecast'
            durationMs: number
        }
        Eip1559Fee: {
            /** @enum {undefined} */
            type: 'Eip1559Fee'
            maxPriorityFeePerGas: components['schemas']['Hexadecimal']
            maxFeePerGas: components['schemas']['Hexadecimal']
            baseFee: components['schemas']['Hexadecimal']
            forecastDuration: components['schemas']['ForecastDuration']
            priceInDefaultCurrency: components['schemas']['Money'] | null
            maxPriceInDefaultCurrency: components['schemas']['Money'] | null
            priceInNativeCurrency: components['schemas']['Money']
        }
        SimulatedTransaction:
            | components['schemas']['ApprovalTransaction']
            | components['schemas']['UnknownTransaction']
            | components['schemas']['FailedTransaction']
            | components['schemas']['NftCollectionApprovalTransaction']
            | components['schemas']['SingleNftApprovalTransaction']
            | components['schemas']['P2PTransaction']
            | components['schemas']['P2PNftTransaction']
        ApprovalTransaction: {
            /** @enum {undefined} */
            type: 'ApprovalTransaction'
            amount: components['schemas']['ApprovalAmount']
            gas: components['schemas']['Hexadecimal']
            approveTo: components['schemas']['SmartContract']
        }
        ApprovalAmount: {
            amount: components['schemas']['Money']
            type: components['schemas']['ApprovalType']
            priceInDefaultCurrency?: components['schemas']['Money'] | null
        }
        /** @enum {string} */
        ApprovalType: 'Limited' | 'Unlimited'
        UnknownTransaction: {
            /** @enum {undefined} */
            type: 'UnknownTransaction'
            method: string
            smartContract?: components['schemas']['SmartContract'] | null
            tokens: components['schemas']['TransactionToken'][]
            nfts: components['schemas']['TransactionNft'][]
            gas: components['schemas']['Hexadecimal']
        }
        FailedTransaction: {
            /** @enum {undefined} */
            type: 'FailedTransaction'
            method: string
            smartContract?: components['schemas']['SmartContract'] | null
        }
        SingleNftApprovalTransaction: {
            /** @enum {undefined} */
            type: 'SingleNftApprovalTransaction'
            gas: components['schemas']['Hexadecimal']
            nft: components['schemas']['Nft']
            approveTo: components['schemas']['SmartContract']
        }
        NftCollectionApprovalTransaction: {
            /** @enum {undefined} */
            type: 'NftCollectionApprovalTransaction'
            gas: components['schemas']['Hexadecimal']
            nftCollectionInfo: components['schemas']['TransactionNftCollectionInfo']
            approveTo: components['schemas']['SmartContract']
        }
        P2PTransaction: {
            /** @enum {undefined} */
            type: 'P2PTransaction'
            gas: components['schemas']['Hexadecimal']
            token: components['schemas']['TransactionToken']
            toAddress: string
        }
        P2PNftTransaction: {
            /** @enum {undefined} */
            type: 'P2PNftTransaction'
            gas: components['schemas']['Hexadecimal']
            nft: components['schemas']['TransactionNft']
            toAddress: string
        }
        TransactionNftCollectionInfo: {
            name: string | null
            /** Format: address */
            address: string
            network: components['schemas']['Network']
        }
        TransactionNft: {
            nft: components['schemas']['Nft']
            direction: components['schemas']['TransactionDirection']
            /** Format: bigint */
            amount: string
        }
        Nft: {
            tokenId: components['schemas']['Hexadecimal']
            name: string | null
            image: string | null
            decimals: number
            collectionInfo: components['schemas']['TransactionNftCollectionInfo']
        }
        SmartContract: {
            address: string
            network: components['schemas']['Network']
            name: string | null
            logo: string | null
            website: string | null
        }
        GenericErrorResponse: {
            message: string
        }
        /** Format: hexadecimal */
        Hexadecimal: string
        /** @description Request body that will be sent to */
        RpcNodeRequest: {
            /** @default 2.0 */
            jsonrpc: string
            method: string
            params: unknown[]
            id: components['schemas']['RpcRequestId']
        }
        /** @description Proxies requests to RPC node */
        RpcNodeSuccessResponse: {
            jsonrpc: components['schemas']['RpcVersion']
            result: components['schemas']['AnyType']
            id: components['schemas']['RpcRequestId']
        }
        /** @description Proxies requests to RPC node */
        RpcNodeErrorResponse: {
            jsonrpc: components['schemas']['RpcVersion']
            error: {
                code?: number
                message?: string
            }
            id: components['schemas']['RpcRequestId']
        }
        /** @description Version of JSON RPC protocol, should always be 2.0 */
        RpcVersion: string
        /** @description Identifier that helps client to map request and response */
        RpcRequestId: number
        /** @description Can be anything: string, number, array, object, etc., including `null` */
        AnyType: unknown
        Currency:
            | components['schemas']['FiatCurrency']
            | components['schemas']['CryptoCurrency']
        FiatCurrency: {
            /** @enum {undefined} */
            type: 'FiatCurrency'
            id: string
            symbol: string
            code: string
            /** Format: int32 */
            fraction: number
            /** Format: int32 */
            rateFraction: number
            icon: string
            name: string
        }
        CryptoCurrency: {
            /** @enum {undefined} */
            type: 'CryptoCurrency'
            id: string
            symbol: string
            code: string
            /** Format: int32 */
            fraction: number
            /** Format: int32 */
            rateFraction: number
            icon: string
            name: string
            address: string
            network: components['schemas']['Network']
        }
        Money: {
            /** Format: bigint */
            amount: string
            currencyId: string
        }
        FxRate: {
            base: string
            quote: string
            /** Format: bigint */
            rate: string
        }
        /** @enum {string} */
        Network:
            | 'Ethereum'
            | 'Arbitrum'
            | 'zkSync'
            | 'BSC'
            | 'Polygon'
            | 'PolygonZkevm'
            | 'Fantom'
            | 'Optimism'
            | 'Base'
            | 'Gnosis'
            | 'Celo'
            | 'Avalanche'
            | 'Harmony'
            | 'Moonriver'
            | 'Cronos'
            | 'Evmos'
            | 'EthereumGoerli'
            | 'EthereumSepolia'
            | 'PolygonMumbai'
            | 'BscTestnet'
            | 'AvalancheFuji'
            | 'OptimismGoerli'
            | 'FantomTestnet'
            | 'ArbitrumGoerli'
            | 'Aurora'
            | 'AuroraTestnet'
        Token: {
            network: components['schemas']['Network']
            address: string
            rate: components['schemas']['FxRate']
            balance: components['schemas']['Money']
            priceInDefaultCurrency: components['schemas']['Money']
            marketData: components['schemas']['MarketData'] | null
            scam: boolean
        }
        App: {
            name: string
            icon: string
            network: components['schemas']['Network']
            priceInDefaultCurrency: components['schemas']['Money']
            tokenNames: string[]
            tokens: components['schemas']['AppToken'][]
            url: string | null
            protocols: components['schemas']['AppProtocol'][]
        }
        AppProtocol:
            | components['schemas']['CommonAppProtocol']
            | components['schemas']['LockedTokenAppProtocol']
            | components['schemas']['LendingAppProtocol']
            | components['schemas']['VestingAppProtocol']
            | components['schemas']['UnknownAppProtocol']
        CommonAppProtocol: {
            /** @enum {undefined} */
            type: 'CommonAppProtocol'
            priceInDefaultCurrency: components['schemas']['Money']
            suppliedTokens: components['schemas']['AppToken'][]
            borrowedTokens: components['schemas']['AppToken'][]
            rewardTokens: components['schemas']['AppToken'][]
            category: string
            description: string | null
        }
        LockedTokenAppProtocol: {
            /** @enum {undefined} */
            type: 'LockedTokenAppProtocol'
            priceInDefaultCurrency: components['schemas']['Money']
            lockedTokens: components['schemas']['AppToken'][]
            rewardTokens: components['schemas']['AppToken'][]
            /** Format: timestamp */
            unlockAt: number
            category: string
            description: string | null
        }
        LendingAppProtocol: {
            /** @enum {undefined} */
            type: 'LendingAppProtocol'
            priceInDefaultCurrency: components['schemas']['Money']
            suppliedTokens: components['schemas']['AppToken'][]
            borrowedTokens: components['schemas']['AppToken'][]
            rewardTokens: components['schemas']['AppToken'][]
            category: string
            healthFactor: number
        }
        VestingAppProtocol: {
            /** @enum {undefined} */
            type: 'VestingAppProtocol'
            priceInDefaultCurrency: components['schemas']['Money']
            vestedToken: components['schemas']['AppToken']
            claimableToken: components['schemas']['AppToken']
            category: string
        }
        UnknownAppProtocol: {
            /** @enum {undefined} */
            type: 'UnknownAppProtocol'
            priceInDefaultCurrency: components['schemas']['Money']
            tokens: components['schemas']['AppToken'][]
            nfts: components['schemas']['AppNft'][]
            category: string
        }
        AppToken: {
            name: string
            network: components['schemas']['Network']
            address: string
            balance: components['schemas']['Money']
            priceInDefaultCurrency: components['schemas']['Money'] | null
        }
        AppNft: {
            tokenId: string
            network: components['schemas']['Network']
            name: string | null
            /** Format: bigint */
            amount: string
            decimals: number
            priceInDefaultCurrency: components['schemas']['Money'] | null
            uri: string | null
        }
        PortfolioNftCollection: {
            name: string
            priceInDefaultCurrency: components['schemas']['Money']
            mintAddress: string
            network: components['schemas']['Network']
            standard: components['schemas']['NftStandard']
            nfts: components['schemas']['PortfolioNft'][]
        }
        /** @enum {string} */
        NftStandard: 'Erc721' | 'Erc1155'
        PortfolioNft: {
            uri: string | null
            name: string
            tokenId: string
            priceInDefaultCurrency: components['schemas']['Money']
            standard: components['schemas']['NftStandard']
            scam: boolean
        }
        Portfolio: {
            currencies: components['schemas']['Currencies']
            tokens: components['schemas']['Token'][]
            apps: components['schemas']['App'][]
            nftCollections: components['schemas']['PortfolioNftCollection'][]
        }
        TransactionHistory: {
            currencies: components['schemas']['Currencies']
            transactions: components['schemas']['HistoryTransaction'][]
            /** Format: timestamp */
            continueFromTimestamp?: number | null
        }
        TransactionActivity: {
            currencies: components['schemas']['Currencies']
            transactions: components['schemas']['ActivityTransaction'][]
            /** Format: timestamp */
            continueFromTimestamp?: number | null
        }
        /** @enum {string} */
        TransactionStatus: 'Completed' | 'Failed'
        /** @enum {string} */
        TransactionDirection: 'Send' | 'Receive'
        TransactionToken: {
            direction: components['schemas']['TransactionDirection']
            amount: components['schemas']['Money']
            priceInDefaultCurrency: components['schemas']['Money'] | null
        }
        HistoryTransaction:
            | components['schemas']['EoaTransaction']
            | components['schemas']['ContractTransaction']
            | components['schemas']['ExchangeTransaction']
        ActivityTransaction:
            | components['schemas']['InboundP2PActivityTransaction']
            | components['schemas']['OutboundP2PActivityTransaction']
            | components['schemas']['OutboundP2PNftActivityTransaction']
            | components['schemas']['SelfP2PActivityTransaction']
            | components['schemas']['SingleNftApprovalActivityTransaction']
            | components['schemas']['SingleNftApprovalRevokeActivityTransaction']
            | components['schemas']['NftCollectionApprovalActivityTransaction']
            | components['schemas']['PartialTokenApprovalActivityTransaction']
            | components['schemas']['NftCollectionApprovalRevokeActivityTransaction']
            | components['schemas']['Erc20ApprovalActivityTransaction']
            | components['schemas']['Erc20ApprovalRevokeActivityTransaction']
            | components['schemas']['UnknownActivityTransaction']
            | components['schemas']['FailedActivityTransaction']
        InboundP2PActivityTransaction: {
            /** @enum {undefined} */
            type: 'InboundP2PActivityTransaction'
            tokens: components['schemas']['TransactionToken'][]
            nfts: components['schemas']['TransactionNft'][]
            /** Format: address */
            sender: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
        }
        OutboundP2PActivityTransaction: {
            /** @enum {undefined} */
            type: 'OutboundP2PActivityTransaction'
            token: components['schemas']['TransactionToken']
            /** Format: address */
            receiver: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        OutboundP2PNftActivityTransaction: {
            /** @enum {undefined} */
            type: 'OutboundP2PNftActivityTransaction'
            nft: components['schemas']['TransactionNft']
            /** Format: address */
            receiver: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        SelfP2PActivityTransaction: {
            /** @enum {undefined} */
            type: 'SelfP2PActivityTransaction'
            network: components['schemas']['Network']
            hash: string
            paidFee: components['schemas']['PaidFee'] | null
            /** Format: timestamp */
            timestamp: number
        }
        SingleNftApprovalActivityTransaction: {
            /** @enum {undefined} */
            type: 'SingleNftApprovalActivityTransaction'
            nft: components['schemas']['Nft']
            approveTo: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        SingleNftApprovalRevokeActivityTransaction: {
            /** @enum {undefined} */
            type: 'SingleNftApprovalRevokeActivityTransaction'
            nft: components['schemas']['Nft']
            revokeFrom: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        NftCollectionApprovalActivityTransaction: {
            /** @enum {undefined} */
            type: 'NftCollectionApprovalActivityTransaction'
            nftCollectionInfo: components['schemas']['TransactionNftCollectionInfo']
            approveTo: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        PartialTokenApprovalActivityTransaction: {
            /** @enum {undefined} */
            type: 'PartialTokenApprovalActivityTransaction'
            approveTo: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        NftCollectionApprovalRevokeActivityTransaction: {
            /** @enum {undefined} */
            type: 'NftCollectionApprovalRevokeActivityTransaction'
            nftCollectionInfo: components['schemas']['TransactionNftCollectionInfo']
            revokeFrom: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        Erc20ApprovalActivityTransaction: {
            /** @enum {undefined} */
            type: 'Erc20ApprovalActivityTransaction'
            allowance: components['schemas']['ApprovalAmount']
            approveTo: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        Erc20ApprovalRevokeActivityTransaction: {
            /** @enum {undefined} */
            type: 'Erc20ApprovalRevokeActivityTransaction'
            allowance: components['schemas']['ApprovalAmount']
            revokeFrom: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        UnknownActivityTransaction: {
            /** @enum {undefined} */
            type: 'UnknownActivityTransaction'
            method: string
            smartContract: components['schemas']['SmartContract']
            tokens: components['schemas']['TransactionToken'][]
            nfts: components['schemas']['TransactionNft'][]
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        FailedActivityTransaction: {
            /** @enum {undefined} */
            type: 'FailedActivityTransaction'
            method: string
            smartContract: components['schemas']['SmartContract']
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            timestamp: number
            paidFee: components['schemas']['PaidFee'] | null
        }
        PaidFee: {
            priceInNativeCurrency: components['schemas']['Money']
            priceInDefaultCurrency: components['schemas']['Money'] | null
        }
        EoaTransaction: {
            /** @enum {undefined} */
            type: 'EoaTransaction'
            token: components['schemas']['TransactionToken']
            status: components['schemas']['TransactionStatus']
            address: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            createdAt: number
        }
        ContractTransaction: {
            /** @enum {undefined} */
            type: 'ContractTransaction'
            tokens: components['schemas']['TransactionToken'][]
            status: components['schemas']['TransactionStatus']
            address: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            createdAt: number
        }
        ExchangeTransaction: {
            /** @enum {undefined} */
            type: 'ExchangeTransaction'
            tokens: components['schemas']['TransactionToken'][]
            status: components['schemas']['TransactionStatus']
            address: string
            network: components['schemas']['Network']
            hash: string
            /** Format: timestamp */
            createdAt: number
        }
        Currencies: { [key: string]: components['schemas']['Currency'] }
        ApprovalsResponse: {
            approvals: components['schemas']['Approval'][]
            currencies: components['schemas']['Currencies']
        }
        Approval:
            | components['schemas']['Erc20TokenApproval']
            | components['schemas']['Erc721TokenApproval']
            | components['schemas']['NftCollectionApproval']
        Erc20TokenApproval: {
            /** @enum {undefined} */
            type: 'Erc20TokenApproval'
            approveTo: components['schemas']['SmartContract']
            allowance: components['schemas']['ApprovalAmount']
        }
        Erc721TokenApproval: {
            /** @enum {undefined} */
            type: 'Erc721TokenApproval'
            approveTo: components['schemas']['SmartContract']
            nft: components['schemas']['Nft']
        }
        NftCollectionApproval: {
            /** @enum {undefined} */
            type: 'NftCollectionApproval'
            approveTo: components['schemas']['SmartContract']
            collectionInfo: components['schemas']['TransactionNftCollectionInfo']
        }
        MarketData: {
            priceChange24h: components['schemas']['PriceChange']
        }
        PriceChange: {
            percentage: number
            direction: components['schemas']['PriceChangeDirection']
        }
        /** @enum {string} */
        PriceChangeDirection: 'Up' | 'Down' | 'Unchanged'
    }
}

export type operations = {}

export type external = {}
